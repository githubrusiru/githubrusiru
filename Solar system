#include <OneWire.h>
#include <DallasTemperature.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include "max6675.h"
#include "time.h"

// Provide the token generation process info.
#include "addons/TokenHelper.h"
// Provide the RTDB payload printing info and other helper functions.
#include "addons/RTDBHelper.h"

// WiFi credentials
#define WIFI_SSID "Xperia1"
#define WIFI_PASSWORD ""

// Firebase project API Key
#define API_KEY "AIzaSyAWoUoUX-lpZST9v_D4OtVaoA6oIhsAUhE"

// Firebase Authorized Email and Password
#define USER_EMAIL "udithlakshan0@gmail.com"
#define USER_PASSWORD "Udith@1234"

// Firebase Realtime Database URL
#define DATABASE_URL "https://solar-project-a443b-default-rtdb.asia-southeast1.firebasedatabase.app/"

// Define Firebase objects
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;
String uid;
String databasePath;

unsigned long sendDataPrevMillis = 0;
unsigned long timerDelay = 6000;  // Send new readings every 3 minutes

FirebaseJson json;
const char* ntpServer = "pool.ntp.org";

// GPIO where the DS18B20 is connected to
const int oneWireBus = 4;     

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(oneWireBus);

// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);

// MAX6675 Thermocouples pin assignments
int thermoDO1 = 19, thermoCS1 = 5, thermoCLK1 = 18;   // Thermocouple 1
int thermoDO2 = 21, thermoCS2 = 22, thermoCLK2 = 23;  // Thermocouple 2

MAX6675 thermocouple1(thermoCLK1, thermoCS1, thermoDO1);
MAX6675 thermocouple2(thermoCLK2, thermoCS2, thermoDO2);

// Solenoid pins
#define S1 13  // Upper inlet solenoid
#define S2 12  // Lower inlet solenoid
#define S3 14  // Lower outlet solenoid
#define S4 27  // Lower outlet solenoid

// Tank level sensor pins
#define L1 32  // Upper level sensor 1
#define L2 33  // Upper level sensor 2
#define L3 34  // Lower level sensor 1
#define L4 35  // Lower level sensor
bool valve1 = false, valve2 = false, valve3 = false, valve4 = false;
float panel01SurfaceTemp;
float panel02SurfaceTemp;
float panel01WaterTemp;

void initWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to WiFi ..");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print('.');
    delay(1000);
  }
  Serial.println(WiFi.localIP());
}

unsigned long getTime() {
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    return 0;
  }
  time(&now);
  return now;
}

void setupWiFiAndFirebase() {
  initWiFi();
  configTime(0, 0, ntpServer);

  // Firebase configurations
  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;
  Firebase.reconnectWiFi(true);
  fbdo.setResponseSize(4096);
  config.token_status_callback = tokenStatusCallback;
  config.max_token_generation_retry = 5;
  Firebase.begin(&config, &auth);

  // Get user UID
  Serial.println("Getting User UID");
  while ((auth.token.uid) == "") {
    Serial.print('.');
    delay(1000);
  }
  uid = auth.token.uid.c_str();
  Serial.print("User UID: ");
  Serial.println(uid);

  // Set database path
  databasePath = "/UsersData/" + uid + "/readings";
}

void sendToFirebase() {
  
  if (Firebase.ready()) {
    if (millis() - sendDataPrevMillis > timerDelay || sendDataPrevMillis == 0) {
      sendDataPrevMillis = millis();

      // Prepare new data to send
      json.clear(); // Clear previous JSON data
      json.set("/panel01SurfaceTemperature", String(panel01SurfaceTemp));
      json.set("/panel02SurfaceTemperature", String(panel02SurfaceTemp));
      json.set("/panel01WaterTemperature", String(panel01WaterTemp));
      json.set("/valve01", valve1 ? "true" : "false");
      json.set("/valve02", valve2 ? "true" : "false");
      json.set("/valve03", valve3 ? "true" : "false");
      json.set("/valve04", valve4 ? "true" : "false");

      // Sending new data to Firebase
      Serial.printf("Setting new json data to %s...\n", databasePath.c_str());
      if (Firebase.RTDB.setJSON(&fbdo, databasePath.c_str(), &json)) {
        Serial.println("Data sent successfully.");
      } else {
        Serial.printf("Failed to send data: %s\n", fbdo.errorReason().c_str());
        // Debugging additional information
        Serial.printf("Firebase ready: %d\n", Firebase.ready());
        Serial.printf("Firebase error code: %d\n", fbdo.errorCode());
      }
    } else {
      Serial.printf("Not sending data. Time since last send: %lu ms\n", millis() - sendDataPrevMillis);
    }
  } else {
    Serial.println("Firebase not ready. Cannot send data.");
  }
}


void checkTankStatus() {
  int D1 = digitalRead(L1);
  int D2 = digitalRead(L2);
  int D3 = digitalRead(L3);
  int D4 = digitalRead(L4);

  if (D1 == 1 || D2 == 1 || D3 == 1 || D4 == 1) {
    // Tank is full, close all solenoids
        digitalWrite(S1, LOW);
        digitalWrite(S2, LOW);
        digitalWrite(S3, HIGH);
        digitalWrite(S4, HIGH);

    Serial.println("Tank is full. All solenoids are off.");
  } else {
    // Tank is not full, activate all solenoids
        digitalWrite(S1, HIGH);
        digitalWrite(S2, HIGH);
        digitalWrite(S3, LOW);
        digitalWrite(S4, LOW);
    Serial.println("Tank is not full. All solenoids are on.");
  }
}

void checkTemperature() {
  panel01SurfaceTemp = thermocouple1.readCelsius();
  panel02SurfaceTemp = thermocouple2.readCelsius();
  sensors.requestTemperatures(); 
  panel01WaterTemp = sensors.getTempCByIndex(0);

  Serial.print("Thermocouple 1 Temperature: ");
  Serial.print(panel01SurfaceTemp);
  Serial.println(" 째C");

  Serial.print("Thermocouple 2 Temperature: ");
  Serial.print(panel02SurfaceTemp);
  Serial.println(" 째C");

  Serial.print("Water Temperature: ");
  Serial.print(panel01WaterTemp);
  Serial.println(" 째C");

  

  if (panel01WaterTemp > 40.00) {
    Serial.println("Temperature exceeded 40째C. Turning off solenoids S3 and S4.");
    digitalWrite(S1, HIGH); 
    digitalWrite(S2, LOW);
    digitalWrite(S3, LOW);
    digitalWrite(S4, LOW);
  }else{
    digitalWrite(S2, HIGH); 
    digitalWrite(S2, HIGH); 
    digitalWrite(S3, HIGH);
    digitalWrite(S4, HIGH);
  }
  
}

void valveState() {
  valve1 = digitalRead(S1);
  valve2 = digitalRead(S2);
  valve3 = digitalRead(S3);
  valve4 = digitalRead(S4);
}

void setup() {
  Serial.begin(9600);

  // Initialize solenoid and sensor pins
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);
  pinMode(S4, OUTPUT);
  pinMode(L1, INPUT);
  pinMode(L2, INPUT);
  pinMode(L3, INPUT);
  pinMode(L4, INPUT);

  // Set initial solenoid states to LOW (off)
  digitalWrite(S1, HIGH);
  digitalWrite(S2, HIGH);
  digitalWrite(S3, HIGH);
  digitalWrite(S4, HIGH);

  // Initialize Wi-Fi and Firebase
  setupWiFiAndFirebase();

  // Start the DS18B20 sensor
  sensors.begin();

  // Delay for MAX6675 to stabilize
  delay(500);
}

void loop() {
  checkTemperature();
  Serial.println("Step 01");
  delay(1000);
  checkTankStatus();
  Serial.println("Step 02");
  delay(1000);

  valveState();
  Serial.println("Step 03");
  delay(1000);

  sendToFirebase();
  Serial.println("Step 04");
  delay(1000);


  
}
